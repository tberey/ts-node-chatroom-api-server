<!-- views/partials/chatScript.ejs - Client Side Scripting (Chatroom Page) -->    
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
<script> 
    $(() => {
        // Declare DOM variables.
        let chatroom = $('#chatroom'); // Display data element.
        let message = $('#message'); // Input text field.
        let sendMessage = $('#submit-message'); // Button.

        let userList = $('#tableStart'); // Display data element.
        let feedback = $('#feedback'); // Display data element.

        let updateUserSec = $('#update-username'); // Input Form Section.
        let username = $('#username'); // Input text field.
        let submitUsername = $('#submit-username'); // Button.

        let updatePassSec = $('#update-password'); // Input Form Section.
        let currentPass = $('#current-password'); // Input text field.
        let newPass = $('#new-password'); // Input text field.
        let confNewPass = $('#confirm-new-password'); // Input text field.
        let submitPassword = $('#submit-password'); // Button.
        let msgLog = $('#msglog'); // Display data element.

        let promptDelAccount = $('.prompt-delete-account'); // Button.
        let closeAccSec = $('#close-account'); // Input form Section.
        let deleteAccount = $('#submit-delete'); // Button.

        const socket = io.connect($('#url').val(), {path:'/chat'}); // Set connection URI (+set path).

        // Listen for change password button click, in order to update a user's password, by PUT request.
        submitPassword.click(() => {
            // PUT Request, to change exisitng username and ammend it to the new value in the sql database.
            $.ajax({
                url:'changePassword',
                method:'PUT',
                data: {
                        // Data to be sent in request body.
                        currentPassword: currentPass.val(),
                        newPassword: newPass.val(),
                        confPassword: confNewPass.val()
                    },
                success:(response) => {
                    // On successful request, display returned server message and time it out.
                    msgLog.html(response);
                    updatePassSec.css('display','none');
                },
                error:(err) => {
                    // On unsuccessful request, display returned server message and time it out.
                    msgLog.html(err.responseText);
                },
                complete:() => {
                    // Clear input fields, info text, and set view, after capturing data and sending request.
                    $('#accountSection').scrollTop($('#accountSection').prop('scrollHeight'));
                    setTimeout(() => msgLog.html(''), 8000);
                    currentPass.val('');
                    newPass.val('');
                    confNewPass.val('');
                }
            });
        });

        // Bind 'message' DOM Object to the 'keypress' event, to emit the user is typing signal. (I.e. When there's a keypress event on input field, emit the signal).
        message.bind("keypress", () => socket.emit('typing'));

        // Listen for a click on the Close Account button, in the Account section of the client page chatroom.
        deleteAccount.click(() => {
            // DELETE Request, to log the client out, delete their account and redirect to login/register.
            $.ajax({
                url:'delete',
                method:'DELETE',
                complete:(response) => {
                    socket.emit('disconnect');
                    location.pathname = response.responseText;
                }
            });
        });

        // Emit new message signal, to update server of message to broadcast/emit to connected sockets.
        sendMessage.click(() => {
            socket.emit('newMessage', {message : message.val()});
            message.val('');
        });

        socket.emit('allMessages'); // Get existing messages.

        // Listen for delete user list signal to clear html, in preparation for a new list emitted. Append received data as a msg to html.
        socket.on('deleteList', (data) => {
            userList.html('');
            if (data) chatroom.append(`<p class="message"><b>Server says:</b><br><i>${data}</i></p>`);
            // Set scroll to bottom of appended element on new message.
            $('#chatroom').scrollTop($('#chatroom').prop('scrollHeight'));
        });

        // Listen for the user list items to be emitted by server on connection, and append to html.
        socket.on('userListItem', (data) => userList.append(`<tr><td>${data.name}</td><td>${data.uniqueID}</td></tr>`));

        // Listen the full message list being retuned.
        socket.on('msgSetItem', (data) => {
            // Build each message into the page DOM.
            chatroom.append(
                `<p class="message"><b>${data.user.name} says:</b><br><span style="font-family:'Caveat',serif;font-size:x-large;">${data.message}</span></p>
                <sup style="font-size:x-small;">Unique ID: <b>${data.user.uniqueID}</b>; sent <i>${data.datetime}.</i></sup>`
            );
            // Auto-scroll to newest message, at bottom of element.
            $("#chatroom").animate({scrollTop:$("#chatroom")[0].scrollHeight}, 80);
        });

        // Listen for any new messages being broadcast/emitted.
        socket.on('newMessage', (data) => {
            // Build each message into the page DOM.
            chatroom.append(
                `<p class="message"><b>${data.user.name} says:</b><br><span style="font-family:'Caveat',serif;font-size:x-large;">${data.message}</span></p>
                <sup style="font-size:x-small;">Unique ID: <b>${data.user.uniqueID}</b>; sent <i>${data.datetime}.</i></sup>`
            );
            // Set scroll to bottom of appended element on new message.
            $('#chatroom').scrollTop($('#chatroom').prop('scrollHeight'));
        });

        // Listen for a user typing signal, to build into Page DOM a message relaying who is typing. Set timer to remove element after 2 seconds.
        socket.on('typing', (data) => {
            if (feedback.html().indexOf(data) == -1) feedback.append(`<sub><i><li class="typing">${data} is typing...</i></sub></li>`);
            setTimeout(() => {feedback.html('');}, 2000);
        });
    });
</script>